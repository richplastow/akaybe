// Generated by CoffeeScript 1.9.1

/*! Akaybe 0.0.2 //// MIT Licence //// http://akaybe.richplastow.com/ */

(function() {
  var Main, Tudor, tudor, ªA, ªB, ªE, ªF, ªI, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªclone, ªpopulate, ªtype,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ªI = 'Akaybe';

  ªV = '0.0.2';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = 'null';

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  ªpopulate = function(candidate, subject, rules, updating) {
    var errors, j, k, key, len, len1, rule, test, type, use, value;
    if (ªO !== ªtype(candidate)) {
      return ["`candidate` is type '" + (ªtype(candidate)) + "' not 'object'"];
    }
    errors = [];
    for (j = 0, len = rules.length; j < len; j++) {
      rule = rules[j];
      key = rule[0], use = rule[1], type = rule[2], test = rule[3];
      value = candidate[key];
      if (void 0 === value) {
        if (updating || void 0 !== use) {
          continue;
        } else {
          errors.push("Missing key '" + key + "' is mandatory");
        }
      } else if (type !== ªtype(value)) {
        errors.push("Key '" + key + "' is type '" + (ªtype(value)) + "' not '" + type + "'");
      } else if (!test.test(value)) {
        errors.push("Key '" + key + "' fails " + ('' + test));
      }
    }
    if (errors.length) {
      return errors;
    }
    for (k = 0, len1 = rules.length; k < len1; k++) {
      rule = rules[k];
      key = rule[0], use = rule[1], type = rule[2], test = rule[3];
      value = candidate[key];
      if (void 0 === value) {
        if (void 0 === subject[key]) {
          subject[key] = use;
        }
      } else {
        subject[key] = value;
      }
    }
  };

  ªclone = function(subject, rules) {
    var j, key, len, out, rule;
    out = {};
    for (j = 0, len = rules.length; j < len; j++) {
      rule = rules[j];
      key = rule[0];
      out[key] = subject[key];
    }
    return out;
  };

  Main = (function() {
    Main.prototype.I = ªI;

    Main.prototype.V = ªV;

    Main.prototype.toString = function() {
      return "[object " + this.I + "]";
    };

    Main.prototype._rules = {
      config: []
    };

    function Main(config) {
      var errors;
      if (config == null) {
        config = {};
      }
      this._c = {};
      if (errors = ªpopulate(config, this._c, this._rules.config)) {
        throw new Error('Invalid `config`:\n  ' + errors.join('\n  '));
      }
    }

    Main.prototype.config = function(key, value) {
      var obj;
      switch (arguments.length) {
        case 0:
          return ªclone(this._c, this._rules.config);
        case 1:
          switch (ªtype(key)) {
            case ªS:
              return this._c[key];
            case ªO:
              return ªpopulate(key, this._c, this._rules.config, true);
          }
          break;
        case 2:
          obj = {};
          obj[key] = value;
          return this.config(obj);
      }
    };

    return Main;

  })();

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªI] = Main;
  }

  Tudor = (function() {
    var invisibles;

    Tudor.prototype.I = 'Tudor';

    Tudor.prototype.toString = function() {
      return "[object " + I + "]";
    };

    Tudor.prototype.jobs = [];

    function Tudor(opt) {
      if (opt == null) {
        opt = {};
      }
      this["do"] = bind(this["do"], this);
      switch (opt.format) {
        case 'html':
          this.header = '<a href="#end" id="top">\u2b07</a>';
          this.footer = '\n<a href="#top" id="end">\u2b06</a>';
          break;
        default:
          this.header = '\u2b07';
          this.footer = '\n\u2b06';
      }
    }

    Tudor.prototype["do"] = function() {
      var actual, double, expect, j, job, len, md, name, ref, result, runner, summary, tallies;
      md = [];
      tallies = [0, 0];
      double = null;
      ref = this.jobs;
      for (j = 0, len = ref.length; j < len; j++) {
        job = ref[j];
        switch (ªtype(job)) {
          case ªF:
            double = job(double);
            break;
          case ªS:
            md.push(job);
            break;
          case ªA:
            runner = job[0], name = job[1], expect = job[2], actual = job[3];
            result = runner(expect, actual, double);
            if (!result) {
              md.push("\u2713 " + name + "  ");
              tallies[0]++;
            } else {
              md.push("\u2718 " + name + "  ");
              md.push("    " + result + "  ");
              tallies[1]++;
            }
        }
        summary = "  passed " + tallies[0] + "/" + (tallies[0] + tallies[1]) + " ";
        summary += tallies[1] ? '\u2718' : '\u2714';
      }
      md.unshift(this.header + summary);
      md.push(this.footer + summary);
      return md.join('\n');
    };

    Tudor.prototype.page = function(text) {
      return this.jobs.push(("\n\n" + text + "\n=") + (new Array(text.length).join('=')));
    };

    Tudor.prototype.section = function(text) {
      return this.jobs.push(("\n\n" + text + "\n-") + (new Array(text.length).join('-')) + '\n');
    };

    Tudor.prototype.fail = function(result, delivery, expect, types) {
      if (types) {
        result = (invisibles(result)) + " (" + (ªtype(result)) + ")";
        expect = (invisibles(expect)) + " (" + (ªtype(expect)) + ")";
      }
      return (invisibles(result)) + "\n    ...was " + delivery + ", but expected...\n    " + (invisibles(expect));
    };

    invisibles = function(value) {
      return value != null ? value.toString().replace(/^\s+|\s+$/g, function(match) {
        return '\u00b7' + (new Array(match.length)).join('\u00b7');
      }) : void 0;
    };

    Tudor.prototype.custom = function(al, runner) {
      var i;
      i = 0;
      while (i < al.length) {
        if (ªF === ªtype(al[i])) {
          this.jobs.push(al[i]);
        } else {
          this.jobs.push([runner, al[i], al[++i], al[++i]]);
        }
        i++;
      }
      return this.jobs.push('- - -');
    };

    Tudor.prototype.throws = function(al) {
      return this.custom(al, (function(_this) {
        return function(expect, actual, double) {
          var e, error;
          error = false;
          try {
            actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (!error) {
            return "No exception thrown, expected...\n    " + expect;
          } else if (expect !== error) {
            return _this.fail(error, 'thrown', expect);
          }
        };
      })(this));
    };

    Tudor.prototype.equal = function(al) {
      return this.custom(al, (function(_this) {
        return function(expect, actual, double) {
          var e, error, result;
          error = false;
          try {
            result = actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (error) {
            return "Unexpected exception...\n    " + error;
          } else if (expect !== result) {
            return _this.fail(result, 'returned', expect, result + '' === expect + '');
          }
        };
      })(this));
    };

    Tudor.prototype.is = function(al) {
      return this.custom(al, (function(_this) {
        return function(expect, actual, double) {
          var e, error, result;
          error = false;
          try {
            result = actual(double);
          } catch (_error) {
            e = _error;
            error = e.message;
          }
          if (error) {
            return "Unexpected exception...\n    " + error;
          } else if (expect !== ªtype(result)) {
            return _this.fail("type " + (ªtype(result)), 'returned', "type " + expect);
          }
        };
      })(this));
    };

    return Tudor;

  })();

  tudor = new Tudor({
    format: ªO === typeof window ? 'html' : 'plain'
  });

  Main.runTest = tudor["do"];

  tudor.page("`Akaybe` Constructor Usage");

  tudor.section("No `config` argument");

  tudor.is([
    "Class is a function", ªF, function() {
      return Main;
    }, function() {
      return new Main;
    }, "Instance is an object", ªO, function(mock) {
      return mock;
    }
  ]);

  tudor.equal([
    "`toString()` is '[object Akaybe]'", '[object Akaybe]', function(mock) {
      return '' + mock;
    }, "`config` is null", '[object Akaybe]', function() {
      return '' + new Main(null);
    }, "`ªI` is `mock.I`", ªI, function(mock) {
      return mock.I;
    }, "`ªV` is `mock.V`", ªV, function(mock) {
      return mock.V;
    }
  ]);

  tudor.section("Basic `config` argument");

  tudor.equal([
    "Set an unknown config key", '[object Akaybe]', function() {
      return '' + new Main({
        unknown: "Wasn't expecting a key called 'unknown'"
      });
    }
  ]);

  tudor.page("`Akaybe` Constructor Errors");

  tudor.section("Invalid `config` Argument");

  tudor.throws([
    "`config` is not an object", "Invalid `config`:\n  `candidate` is type 'number' not 'object'", function() {
      return new Main(1);
    }, "`config` is a `Date` object", "Invalid `config`:\n  `candidate` is type 'date' not 'object'", function() {
      return new Main(new Date);
    }, "`config` is a `String` object", "Invalid `config`:\n  `candidate` is type 'string' not 'object'", function() {
      return new Main(new String('yikes!'));
    }
  ]);

}).call(this);
