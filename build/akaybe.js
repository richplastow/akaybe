// Generated by CoffeeScript 1.9.1

/*! Akaybe 0.0.2 //// MIT Licence //// http://akaybe.richplastow.com/ */

(function() {
  var Main, ªA, ªB, ªE, ªF, ªI, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªclone, ªpopulate, ªtype;

  ªI = 'Akaybe';

  ªV = '0.0.2';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = 'null';

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  ªpopulate = function(candidate, subject, rules, updating) {
    var errors, i, j, key, len, len1, rule, test, type, use, value;
    if (ªO !== ªtype(candidate)) {
      return ["`candidate` is type '" + (ªtype(candidate)) + "' not 'object'"];
    }
    errors = [];
    for (i = 0, len = rules.length; i < len; i++) {
      rule = rules[i];
      key = rule[0], use = rule[1], type = rule[2], test = rule[3];
      value = candidate[key];
      if (void 0 === value) {
        if (updating || void 0 !== use) {
          continue;
        } else {
          errors.push("Missing key '" + key + "' is mandatory");
        }
      } else if (type !== ªtype(value)) {
        errors.push("Key '" + key + "' is type '" + (ªtype(value)) + "' not '" + type + "'");
      } else if (!test.test(value)) {
        errors.push("Key '" + key + "' fails " + ('' + test));
      }
    }
    if (errors.length) {
      return errors;
    }
    for (j = 0, len1 = rules.length; j < len1; j++) {
      rule = rules[j];
      key = rule[0], use = rule[1], type = rule[2], test = rule[3];
      value = candidate[key];
      if (void 0 === value) {
        if (void 0 === subject[key]) {
          subject[key] = use;
        }
      } else {
        subject[key] = value;
      }
    }
  };

  ªclone = function(subject, rules) {
    var i, key, len, out, rule;
    out = {};
    for (i = 0, len = rules.length; i < len; i++) {
      rule = rules[i];
      key = rule[0];
      out[key] = subject[key];
    }
    return out;
  };

  Main = (function() {
    Main.prototype.I = ªI;

    Main.prototype.V = ªV;

    Main.prototype.toString = function() {
      return "[object " + this.I + "]";
    };

    Main.prototype._rules = {
      config: []
    };

    function Main(config) {
      var errors;
      if (config == null) {
        config = {};
      }
      this._c = {};
      if (errors = ªpopulate(config, this._c, this._rules.config)) {
        throw new Error('Invalid `config`:\n  ' + errors.join('\n  '));
      }
    }

    Main.prototype.config = function(key, value) {
      var obj;
      switch (arguments.length) {
        case 0:
          return ªclone(this._c, this._rules.config);
        case 1:
          switch (ªtype(key)) {
            case ªS:
              return this._c[key];
            case ªO:
              return ªpopulate(key, this._c, this._rules.config, true);
          }
          break;
        case 2:
          obj = {};
          obj[key] = value;
          return this.config(obj);
      }
    };

    return Main;

  })();

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªI] = Main;
  }

}).call(this);
